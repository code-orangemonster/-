const int MX = 1e6;
vector<int> primes;

int init = []() {
    bool np[MX + 1]{};
    for (int i = 2; i <= MX; ++i)
        if (!np[i]) {
            primes.push_back(i);
            for (int j = i; j <= MX / i; ++j) // 避免溢出的写法
                np[i * j] = true;
        }
    primes.push_back(MX + 1);
    primes.push_back(MX + 1); // 保证下面下标不会越界
    return 0;
}();

/*

分享🤏笔记

第一步：预处理找到范围内所有的质数（有两种方法：埃氏筛、线性筛）
第二步：用二分法找到第一个 ≥ left 的质数
第三步：找符合条件（质数差最小）的 两个质数
方法一：埃氏筛

思路：
若 i 是质数，筛掉 i 的倍数；如果没有被小于自己的数筛掉，就是质数
从 i * i 开始筛，更小的已经被i之前的质数筛掉了
时间复杂度
预处理：每个质数 i，循环 MX/ i 次
$\Sigma \frac{MX}{i}$=MX(1/2 + 1/3 + 1/5 + …… ) ， O(loglogMX)
MX范围内的质数个数：MX / logMX
二分时间复杂度：O(log(MX / logMX))
枚举范围内的数组：O(r / log r - l / log l)
方法二：线性筛（欧拉筛）

思路：
每个合数只被划掉一次
被它的最小质因子划掉
时间复杂度：O(MX)

*/